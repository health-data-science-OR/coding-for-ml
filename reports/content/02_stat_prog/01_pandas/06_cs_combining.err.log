Traceback (most recent call last):
  File "/home/tom/miniforge3/envs/hds_code/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/tom/miniforge3/envs/hds_code/lib/python3.11/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/tom/miniforge3/envs/hds_code/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/tom/miniforge3/envs/hds_code/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/tom/miniforge3/envs/hds_code/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/tom/miniforge3/envs/hds_code/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/tom/miniforge3/envs/hds_code/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# organisation info and num referrals
n_refs = (pd.read_csv(NREFS_URL)
            .rename(columns={' Year ': 'n_referrals',
                             'Region': 'region',
                             'Org Code': 'org_code',
                             'Provider name': 'provider',
                             'Modality': 'imaging_type'})
            # strip out white space
            .assign(org_code=lambda x: x['org_code'].str.strip(),
                    imaging_type=lambda x: x['imaging_type'].str.strip(),
                    provider=lambda x: x['provider'].str.strip(),
                    region=lambda x: x['region'].str.strip())
            .pipe(extract_index_plus_annual_column)
            .rename(columns={' Year ': 'n_referrals'})
            .replace(['*', ' * '], np.nan)
            .assign(n_referrals=lambda x: x['n_referrals'].str.strip())
            .assign(n_referrals=lambda x: x['n_referrals'].str.replace(',', ''))
            # deal with NaN -> to float and then nullable int (or keep float)
            # NaN is a float.  Nullable int use pd.Int64Dtype()
            .astype({'n_referrals': np.float})
            .astype({'n_referrals': pd.Int32Dtype()})
         )
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[5], line 20[0m
[1;32m      1[0m [38;5;66;03m# organisation info and num referrals[39;00m
[1;32m      2[0m n_refs [38;5;241m=[39m (pd[38;5;241m.[39mread_csv(NREFS_URL)
[1;32m      3[0m             [38;5;241m.[39mrename(columns[38;5;241m=[39m{[38;5;124m'[39m[38;5;124m Year [39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124mn_referrals[39m[38;5;124m'[39m,
[1;32m      4[0m                              [38;5;124m'[39m[38;5;124mRegion[39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124mregion[39m[38;5;124m'[39m,
[1;32m      5[0m                              [38;5;124m'[39m[38;5;124mOrg Code[39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124morg_code[39m[38;5;124m'[39m,
[1;32m      6[0m                              [38;5;124m'[39m[38;5;124mProvider name[39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124mprovider[39m[38;5;124m'[39m,
[1;32m      7[0m                              [38;5;124m'[39m[38;5;124mModality[39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124mimaging_type[39m[38;5;124m'[39m})
[1;32m      8[0m             [38;5;66;03m# strip out white space[39;00m
[1;32m      9[0m             [38;5;241m.[39massign(org_code[38;5;241m=[39m[38;5;28;01mlambda[39;00m x: x[[38;5;124m'[39m[38;5;124morg_code[39m[38;5;124m'[39m][38;5;241m.[39mstr[38;5;241m.[39mstrip(),
[1;32m     10[0m                     imaging_type[38;5;241m=[39m[38;5;28;01mlambda[39;00m x: x[[38;5;124m'[39m[38;5;124mimaging_type[39m[38;5;124m'[39m][38;5;241m.[39mstr[38;5;241m.[39mstrip(),
[1;32m     11[0m                     provider[38;5;241m=[39m[38;5;28;01mlambda[39;00m x: x[[38;5;124m'[39m[38;5;124mprovider[39m[38;5;124m'[39m][38;5;241m.[39mstr[38;5;241m.[39mstrip(),
[1;32m     12[0m                     region[38;5;241m=[39m[38;5;28;01mlambda[39;00m x: x[[38;5;124m'[39m[38;5;124mregion[39m[38;5;124m'[39m][38;5;241m.[39mstr[38;5;241m.[39mstrip())
[1;32m     13[0m             [38;5;241m.[39mpipe(extract_index_plus_annual_column)
[1;32m     14[0m             [38;5;241m.[39mrename(columns[38;5;241m=[39m{[38;5;124m'[39m[38;5;124m Year [39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124mn_referrals[39m[38;5;124m'[39m})
[1;32m     15[0m             [38;5;241m.[39mreplace([[38;5;124m'[39m[38;5;124m*[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124m * [39m[38;5;124m'[39m], np[38;5;241m.[39mnan)
[1;32m     16[0m             [38;5;241m.[39massign(n_referrals[38;5;241m=[39m[38;5;28;01mlambda[39;00m x: x[[38;5;124m'[39m[38;5;124mn_referrals[39m[38;5;124m'[39m][38;5;241m.[39mstr[38;5;241m.[39mstrip())
[1;32m     17[0m             [38;5;241m.[39massign(n_referrals[38;5;241m=[39m[38;5;28;01mlambda[39;00m x: x[[38;5;124m'[39m[38;5;124mn_referrals[39m[38;5;124m'[39m][38;5;241m.[39mstr[38;5;241m.[39mreplace([38;5;124m'[39m[38;5;124m,[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124m'[39m))
[1;32m     18[0m             [38;5;66;03m# deal with NaN -> to float and then nullable int (or keep float)[39;00m
[1;32m     19[0m             [38;5;66;03m# NaN is a float.  Nullable int use pd.Int64Dtype()[39;00m
[0;32m---> 20[0m             [38;5;241m.[39mastype({[38;5;124m'[39m[38;5;124mn_referrals[39m[38;5;124m'[39m: [43mnp[49m[38;5;241;43m.[39;49m[43mfloat[49m})
[1;32m     21[0m             [38;5;241m.[39mastype({[38;5;124m'[39m[38;5;124mn_referrals[39m[38;5;124m'[39m: pd[38;5;241m.[39mInt32Dtype()})
[1;32m     22[0m          )

File [0;32m~/miniforge3/envs/hds_code/lib/python3.11/site-packages/numpy/__init__.py:394[0m, in [0;36m__getattr__[0;34m(attr)[0m
[1;32m    389[0m     warnings[38;5;241m.[39mwarn(
[1;32m    390[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mIn the future `np.[39m[38;5;132;01m{[39;00mattr[38;5;132;01m}[39;00m[38;5;124m` will be defined as the [39m[38;5;124m"[39m
[1;32m    391[0m         [38;5;124m"[39m[38;5;124mcorresponding NumPy scalar.[39m[38;5;124m"[39m, [38;5;167;01mFutureWarning[39;00m, stacklevel[38;5;241m=[39m[38;5;241m2[39m)
[1;32m    393[0m [38;5;28;01mif[39;00m attr [38;5;129;01min[39;00m __former_attrs__:
[0;32m--> 394[0m     [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(__former_attrs__[attr])
[1;32m    396[0m [38;5;28;01mif[39;00m attr [38;5;129;01min[39;00m __expired_attributes__:
[1;32m    397[0m     [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(
[1;32m    398[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124m`np.[39m[38;5;132;01m{[39;00mattr[38;5;132;01m}[39;00m[38;5;124m` was removed in the NumPy 2.0 release. [39m[38;5;124m"[39m
[1;32m    399[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m__expired_attributes__[attr][38;5;132;01m}[39;00m[38;5;124m"[39m
[1;32m    400[0m     )

[0;31mAttributeError[0m: module 'numpy' has no attribute 'float'.
`np.float` was a deprecated alias for the builtin `float`. To avoid this error in existing code, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations

